//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.239
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MainSL
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using VotGES.Web.Services;
    
    
    /// <summary>
    /// Контекст полнофункционального интернет-приложения (RIA).
    /// </summary>
    /// <remarks>
    /// Данный контекст расширяет базовый и делает доступными службы и типы приложений,
    /// которые могут быть использованы в коде и xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Инициализирует новый экземпляр класса WebContext.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает контекст, зарегистрированный как объект времени существования в данном приложении.
        /// </summary>
        /// Исключение <exception cref="InvalidOperationException"> вызывается в том случае, если отсутствует текущее приложение,
        /// не добавлено ни одного контекста либо было добавлено более одного контекста.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
        
        /// <summary>
        /// Возвращает пользователя, прошедшего проверку подлинности.
        /// </summary>
        public new User User
        {
            get
            {
                return ((User)(base.User));
            }
        }
    }
}
namespace VotGES.Web.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// Класс "RUSAData".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/VotGES.Web.Models")]
    public sealed partial class RUSAData : ComplexObject
    {
        
        private Dictionary<int, bool> _gaAvail;
        
        private Guid _id;
        
        private double _napor;
        
        private double _power;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnGaAvailChanging(Dictionary<int, bool> value);
        partial void OnGaAvailChanged();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnNaporChanging(double value);
        partial void OnNaporChanged();
        partial void OnPowerChanging(double value);
        partial void OnPowerChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="RUSAData"/>.
        /// </summary>
        public RUSAData()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "GaAvail".
        /// </summary>
        [DataMember()]
        public Dictionary<int, bool> GaAvail
        {
            get
            {
                return this._gaAvail;
            }
            set
            {
                if ((this._gaAvail != value))
                {
                    this.OnGaAvailChanging(value);
                    this.RaiseDataMemberChanging("GaAvail");
                    this.ValidateProperty("GaAvail", value);
                    this._gaAvail = value;
                    this.RaiseDataMemberChanged("GaAvail");
                    this.OnGaAvailChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Id".
        /// </summary>
        [DataMember()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.RaiseDataMemberChanging("Id");
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaiseDataMemberChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Napor".
        /// </summary>
        [DataMember()]
        public double Napor
        {
            get
            {
                return this._napor;
            }
            set
            {
                if ((this._napor != value))
                {
                    this.OnNaporChanging(value);
                    this.RaiseDataMemberChanging("Napor");
                    this.ValidateProperty("Napor", value);
                    this._napor = value;
                    this.RaiseDataMemberChanged("Napor");
                    this.OnNaporChanged();
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Power".
        /// </summary>
        [DataMember()]
        public double Power
        {
            get
            {
                return this._power;
            }
            set
            {
                if ((this._power != value))
                {
                    this.OnPowerChanging(value);
                    this.RaiseDataMemberChanging("Power");
                    this.ValidateProperty("Power", value);
                    this._power = value;
                    this.RaiseDataMemberChanged("Power");
                    this.OnPowerChanged();
                }
            }
        }
    }
}
namespace VotGES.Web.Services
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using VotGES.Web.Models;
    
    
    /// <summary>
    /// Контекст DomainContext, соответствующий службе "AuthenticationDomainService" DomainService.
    /// </summary>
    public sealed partial class AuthenticationDomainContext : global::System.ServiceModel.DomainServices.Client.ApplicationServices.AuthenticationDomainContextBase
    {
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="AuthenticationDomainContext"/>.
        /// </summary>
        public AuthenticationDomainContext() : 
                this(new WebDomainClient<IAuthenticationDomainServiceContract>(new Uri("VotGES-Web-Services-AuthenticationDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="AuthenticationDomainContext"/> с указанным URI службы.
        /// </summary>
        /// <param name="serviceUri">Идентификатор URI службы AuthenticationDomainService.</param>
        public AuthenticationDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IAuthenticationDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="AuthenticationDomainContext"/> с указанным параметром <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">Экземпляр DomainClient для использования в этом контексте DomainContext.</param>
        public AuthenticationDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает набор экземпляров сущностей <see cref="User"/>, загруженных в данный экземпляр <see cref="AuthenticationDomainContext"/>.
        /// </summary>
        public EntitySet<User> Users
        {
            get
            {
                return base.EntityContainer.GetEntitySet<User>();
            }
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="User"/> с помощью запроса "GetUser".
        /// </summary>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="User"/>.</returns>
        public EntityQuery<User> GetUserQuery()
        {
            this.ValidateMethod("GetUserQuery", null);
            return base.CreateQuery<User>("GetUser", null, false, false);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="User"/> с помощью запроса "Login".
        /// </summary>
        /// <param name="userName">Значение параметра "userName" для запроса.</param>
        /// <param name="password">Значение параметра "password" для запроса.</param>
        /// <param name="isPersistent">Значение параметра "isPersistent" для запроса.</param>
        /// <param name="customData">Значение параметра "customData" для запроса.</param>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="User"/>.</returns>
        public EntityQuery<User> LoginQuery(string userName, string password, bool isPersistent, string customData)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            parameters.Add("isPersistent", isPersistent);
            parameters.Add("customData", customData);
            this.ValidateMethod("LoginQuery", parameters);
            return base.CreateQuery<User>("Login", parameters, true, false);
        }
        
        /// <summary>
        /// Возвращает экземпляр EntityQuery, который может быть использован для загрузки экземпляров сущностей <see cref="User"/> с помощью запроса "Logout".
        /// </summary>
        /// <returns>Значение EntityQuery, которое может быть загружено для извлечения экземпляров сущностей <see cref="User"/>.</returns>
        public EntityQuery<User> LogoutQuery()
        {
            this.ValidateMethod("LogoutQuery", null);
            return base.CreateQuery<User>("Logout", null, true, false);
        }
        
        /// <summary>
        /// Создает новый объект EntityContainer для наборов сущностей EntitySets данного контекста DomainContext.
        /// </summary>
        /// <returns>Новый экземпляр контейнера.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new AuthenticationDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Контракт службы (Service) "AuthenticationDomainService" DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IAuthenticationDomainServiceContract
        {
            
            /// <summary>
            /// Асинхронно вызывает операцию "GetUser".
            /// </summary>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationDomainService/GetUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationDomainService/GetUser", ReplyAction="http://tempuri.org/AuthenticationDomainService/GetUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetUser(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginGetUser".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginGetUser".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "GetUser".</returns>
            QueryResult<User> EndGetUser(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "Login".
            /// </summary>
            /// <param name="userName">Значение параметра "userName" для данного действия.</param>
            /// <param name="password">Значение параметра "password" для данного действия.</param>
            /// <param name="isPersistent">Значение параметра "isPersistent" для данного действия.</param>
            /// <param name="customData">Значение параметра "customData" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationDomainService/LoginDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationDomainService/Login", ReplyAction="http://tempuri.org/AuthenticationDomainService/LoginResponse")]
            IAsyncResult BeginLogin(string userName, string password, bool isPersistent, string customData, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginLogin".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginLogin".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "Login".</returns>
            QueryResult<User> EndLogin(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "Logout".
            /// </summary>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationDomainService/LogoutDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationDomainService/Logout", ReplyAction="http://tempuri.org/AuthenticationDomainService/LogoutResponse")]
            IAsyncResult BeginLogout(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginLogout".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginLogout".</param>
            /// <returns>Объект "QueryResult", возвращенный из операции "Logout".</returns>
            QueryResult<User> EndLogout(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "SubmitChanges".
            /// </summary>
            /// <param name="changeSet">Набор изменений для отправки.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationDomainService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationDomainService/SubmitChanges", ReplyAction="http://tempuri.org/AuthenticationDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginSubmitChanges".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginSubmitChanges".</param>
            /// <returns>Коллекция элементов набора изменений, возвращенного операцией SubmitChanges.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class AuthenticationDomainContextEntityContainer : EntityContainer
        {
            
            public AuthenticationDomainContextEntityContainer()
            {
                this.CreateEntitySet<User>(EntitySetOperations.Edit);
            }
        }
    }
    
    /// <summary>
    /// Контекст DomainContext, соответствующий службе "LoggerService" DomainService.
    /// </summary>
    public sealed partial class LoggerContext : DomainContext
    {
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="LoggerContext"/>.
        /// </summary>
        public LoggerContext() : 
                this(new WebDomainClient<ILoggerServiceContract>(new Uri("VotGES-Web-Services-LoggerService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="LoggerContext"/> с указанным URI службы.
        /// </summary>
        /// <param name="serviceUri">Идентификатор URI службы LoggerService.</param>
        public LoggerContext(Uri serviceUri) : 
                this(new WebDomainClient<ILoggerServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="LoggerContext"/> с указанным параметром <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">Экземпляр DomainClient для использования в этом контексте DomainContext.</param>
        public LoggerContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "debug" службы DomainService.
        /// </summary>
        /// <param name="message">Значение параметра "message" для данного действия.</param>
        /// <param name="callback">Функция обратного вызова вызывается после завершения операции.</param>
        /// <param name="userState">Параметр для передачи в функцию обратного вызова. Может быть равен <c>null</c>.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation debug(string message, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("message", message);
            this.ValidateMethod("debug", parameters);
            return this.InvokeOperation("debug", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "debug" службы DomainService.
        /// </summary>
        /// <param name="message">Значение параметра "message" для данного действия.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation debug(string message)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("message", message);
            this.ValidateMethod("debug", parameters);
            return this.InvokeOperation("debug", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "error" службы DomainService.
        /// </summary>
        /// <param name="message">Значение параметра "message" для данного действия.</param>
        /// <param name="callback">Функция обратного вызова вызывается после завершения операции.</param>
        /// <param name="userState">Параметр для передачи в функцию обратного вызова. Может быть равен <c>null</c>.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation error(string message, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("message", message);
            this.ValidateMethod("error", parameters);
            return this.InvokeOperation("error", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "error" службы DomainService.
        /// </summary>
        /// <param name="message">Значение параметра "message" для данного действия.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation error(string message)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("message", message);
            this.ValidateMethod("error", parameters);
            return this.InvokeOperation("error", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "info" службы DomainService.
        /// </summary>
        /// <param name="message">Значение параметра "message" для данного действия.</param>
        /// <param name="callback">Функция обратного вызова вызывается после завершения операции.</param>
        /// <param name="userState">Параметр для передачи в функцию обратного вызова. Может быть равен <c>null</c>.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation info(string message, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("message", message);
            this.ValidateMethod("info", parameters);
            return this.InvokeOperation("info", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "info" службы DomainService.
        /// </summary>
        /// <param name="message">Значение параметра "message" для данного действия.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation info(string message)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("message", message);
            this.ValidateMethod("info", parameters);
            return this.InvokeOperation("info", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Создает новый объект EntityContainer для наборов сущностей EntitySets данного контекста DomainContext.
        /// </summary>
        /// <returns>Новый экземпляр контейнера.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new LoggerContextEntityContainer();
        }
        
        /// <summary>
        /// Контракт службы (Service) "LoggerService" DomainService.
        /// </summary>
        [ServiceContract()]
        public interface ILoggerServiceContract
        {
            
            /// <summary>
            /// Асинхронно вызывает операцию "debug".
            /// </summary>
            /// <param name="message">Значение параметра "message" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LoggerService/debugDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LoggerService/debug", ReplyAction="http://tempuri.org/LoggerService/debugResponse")]
            IAsyncResult Begindebug(string message, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "Begindebug".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "Begindebug".</param>
            void Enddebug(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "error".
            /// </summary>
            /// <param name="message">Значение параметра "message" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LoggerService/errorDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LoggerService/error", ReplyAction="http://tempuri.org/LoggerService/errorResponse")]
            IAsyncResult Beginerror(string message, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "Beginerror".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "Beginerror".</param>
            void Enderror(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "info".
            /// </summary>
            /// <param name="message">Значение параметра "message" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LoggerService/infoDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LoggerService/info", ReplyAction="http://tempuri.org/LoggerService/infoResponse")]
            IAsyncResult Begininfo(string message, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "Begininfo".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "Begininfo".</param>
            void Endinfo(IAsyncResult result);
        }
        
        internal sealed class LoggerContextEntityContainer : EntityContainer
        {
            
            public LoggerContextEntityContainer()
            {
            }
        }
    }
    
    /// <summary>
    /// Контекст DomainContext, соответствующий службе "RUSAService" DomainService.
    /// </summary>
    public sealed partial class RUSAContext : DomainContext
    {
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="RUSAContext"/>.
        /// </summary>
        public RUSAContext() : 
                this(new WebDomainClient<IRUSAServiceContract>(new Uri("VotGES-Web-Services-RUSAService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="RUSAContext"/> с указанным URI службы.
        /// </summary>
        /// <param name="serviceUri">Идентификатор URI службы RUSAService.</param>
        public RUSAContext(Uri serviceUri) : 
                this(new WebDomainClient<IRUSAServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Инициализирует новый экземпляр класса <see cref="RUSAContext"/> с указанным параметром <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">Экземпляр DomainClient для использования в этом контексте DomainContext.</param>
        public RUSAContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "initRUSAData" службы DomainService.
        /// </summary>
        /// <param name="data">Значение параметра "data" для данного действия.</param>
        /// <param name="callback">Функция обратного вызова вызывается после завершения операции.</param>
        /// <param name="userState">Параметр для передачи в функцию обратного вызова. Может быть равен <c>null</c>.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<int> initRUSAData(RUSAData data, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("data", data);
            this.ValidateMethod("initRUSAData", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("initRUSAData", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "initRUSAData" службы DomainService.
        /// </summary>
        /// <param name="data">Значение параметра "data" для данного действия.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<int> initRUSAData(RUSAData data)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("data", data);
            this.ValidateMethod("initRUSAData", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("initRUSAData", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "processRUSAData" службы DomainService.
        /// </summary>
        /// <param name="data">Значение параметра "data" для данного действия.</param>
        /// <param name="callback">Функция обратного вызова вызывается после завершения операции.</param>
        /// <param name="userState">Параметр для передачи в функцию обратного вызова. Может быть равен <c>null</c>.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<RUSAData> processRUSAData(RUSAData data, Action<InvokeOperation<RUSAData>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("data", data);
            this.ValidateMethod("processRUSAData", parameters);
            return ((InvokeOperation<RUSAData>)(this.InvokeOperation("processRUSAData", typeof(RUSAData), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Асинхронно вызывает метод "processRUSAData" службы DomainService.
        /// </summary>
        /// <param name="data">Значение параметра "data" для данного действия.</param>
        /// <returns>Экземпляр операции, который может быть использован для управления асинхронным запросом.</returns>
        public InvokeOperation<RUSAData> processRUSAData(RUSAData data)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("data", data);
            this.ValidateMethod("processRUSAData", parameters);
            return ((InvokeOperation<RUSAData>)(this.InvokeOperation("processRUSAData", typeof(RUSAData), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Создает новый объект EntityContainer для наборов сущностей EntitySets данного контекста DomainContext.
        /// </summary>
        /// <returns>Новый экземпляр контейнера.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new RUSAContextEntityContainer();
        }
        
        /// <summary>
        /// Контракт службы (Service) "RUSAService" DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IRUSAServiceContract
        {
            
            /// <summary>
            /// Асинхронно вызывает операцию "initRUSAData".
            /// </summary>
            /// <param name="data">Значение параметра "data" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RUSAService/initRUSADataDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RUSAService/initRUSAData", ReplyAction="http://tempuri.org/RUSAService/initRUSADataResponse")]
            IAsyncResult BegininitRUSAData(RUSAData data, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BegininitRUSAData".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BegininitRUSAData".</param>
            /// <returns>Объект "Int32", возвращенный из операции "initRUSAData".</returns>
            int EndinitRUSAData(IAsyncResult result);
            
            /// <summary>
            /// Асинхронно вызывает операцию "processRUSAData".
            /// </summary>
            /// <param name="data">Значение параметра "data" для данного действия.</param>
            /// <param name="callback">Функция обратного вызова вызывается после завершения.</param>
            /// <param name="asyncState">Необязательный объект состояния.</param>
            /// <returns>Интерфейс IAsyncResult, который может быть использован для отслеживания запроса.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RUSAService/processRUSADataDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RUSAService/processRUSAData", ReplyAction="http://tempuri.org/RUSAService/processRUSADataResponse")]
            IAsyncResult BeginprocessRUSAData(RUSAData data, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Завершает асинхронную операцию, начатую "BeginprocessRUSAData".
            /// </summary>
            /// <param name="result">Интерфейс IAsyncResult, возвращенный из "BeginprocessRUSAData".</param>
            /// <returns>Объект "RUSAData", возвращенный из операции "processRUSAData".</returns>
            RUSAData EndprocessRUSAData(IAsyncResult result);
        }
        
        internal sealed class RUSAContextEntityContainer : EntityContainer
        {
            
            public RUSAContextEntityContainer()
            {
            }
        }
    }
    
    /// <summary>
    /// Класс сущности "User".
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/VotGES.Web.Services")]
    public sealed partial class User : Entity, global::System.Security.Principal.IIdentity, global::System.Security.Principal.IPrincipal
    {
        
        private string _name = string.Empty;
        
        private IEnumerable<string> _roles;
        
        #region Определение методов расширяемости

        /// <summary>
        /// Этот метод вызывается из конструктора по завершении инициализации и
        /// не может быть использован для последующей настройки объекта.
        /// </summary>
        partial void OnCreated();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRolesChanging(IEnumerable<string> value);
        partial void OnRolesChanged();

        #endregion
        
        
        /// <summary>
        /// Инициализация нового экземпляра класса <see cref="User"/>.
        /// </summary>
        public User()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Name".
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaisePropertyChanged("Name");
                    this.OnNameChanged();
                    this.RaisePropertyChanged("IsAuthenticated");
                }
            }
        }
        
        /// <summary>
        /// Возвращает или задает значение параметра "Roles".
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public IEnumerable<string> Roles
        {
            get
            {
                return this._roles;
            }
            set
            {
                if ((this._roles != value))
                {
                    this.OnRolesChanging(value);
                    this.ValidateProperty("Roles", value);
                    this._roles = value;
                    this.RaisePropertyChanged("Roles");
                    this.OnRolesChanged();
                }
            }
        }
        
        string global::System.Security.Principal.IIdentity.AuthenticationType
        {
            get
            {
                return string.Empty;
            }
        }
        
        /// <summary>
        /// Возвращает значение, указывающее, проверена ли подлинность пользователя.
        /// </summary>
        /// <remarks>
        /// Это значение равно <c>true</c>, если <see cref="Name"/> не является пустым значением и не равно <c>null</c>.
        /// </remarks>
        public bool IsAuthenticated
        {
            get
            {
                return (true != string.IsNullOrEmpty(this.Name));
            }
        }
        
        string global::System.Security.Principal.IIdentity.Name
        {
            get
            {
                return this.Name;
            }
        }
        
        global::System.Security.Principal.IIdentity global::System.Security.Principal.IPrincipal.Identity
        {
            get
            {
                return this;
            }
        }
        
        /// <summary>
        /// Вычисляет значение ключевых полей, уникально идентифицирующее данный экземпляр сущности.
        /// </summary>
        /// <returns>Экземпляр объекта, уникально идентифицирующий данный экземпляр сущности.</returns>
        public override object GetIdentity()
        {
            return this._name;
        }
        
        /// <summary>
        /// Возвращает значение, указывающее, имеет ли участник данную роль.
        /// </summary>
        /// <remarks>
        /// Возвращает значение, указывающее, содержится ли указанная роль в списке ролей.
        /// Эта функция учитывает регистр символов.
        /// </remarks>
        /// <param name="role">Имя роли, членство в которой проверяется.</param>
        /// <returns>Возвращает значение, указывающее, имеет ли участник данную роль.</returns>
        public bool IsInRole(string role)
        {
            if ((this.Roles == null))
            {
                return false;
            }
            return global::System.Linq.Enumerable.Contains(this.Roles, role);
        }
    }
}
